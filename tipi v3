import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog, colorchooser
import os
import io
import contextlib
import tkinter.font as tkfont

class TipiEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("√âditeur .tipi ü™∂ + Config")
        self.root.geometry("900x600")

        # Default settings
        self.font_size = 12
        self.font_color = 'black'

        # Main frame
        self.frame = tk.Frame(root)
        self.frame.pack(fill='both', expand=1)

        # Text area
        self.text_font = tkfont.Font(family='Courier', size=self.font_size)
        self.text = tk.Text(self.frame, wrap='word', font=self.text_font, fg=self.font_color)
        self.text.pack(side='left', fill='both', expand=1)

        # Image label
        self.img_label = tk.Label(self.frame, text="Aucune image")
        self.img_label.pack(side='right', padx=10, pady=10)

        # Python console area
        self.console = tk.Text(root, height=10, bg="black", fg="lime", insertbackground="white")
        self.console.pack(fill='x')
        self.console.insert(tk.END, ">> Console Python pr√™te.\n")
        self.console.config(state='disabled')

        # Menu bar
        self.menu = tk.Menu(root)
        root.config(menu=self.menu)

        # File menu
        file_menu = tk.Menu(self.menu, tearoff=0)
        file_menu.add_command(label="Ouvrir .tipi", command=self.open_tipi)
        file_menu.add_command(label="Enregistrer .tipi", command=self.save_tipi)
        self.menu.add_cascade(label="Fichier", menu=file_menu)

        # Image menu
        img_menu = tk.Menu(self.menu, tearoff=0)
        img_menu.add_command(label="S√©lectionner une image PNG", command=self.select_image)
        self.menu.add_cascade(label="Image", menu=img_menu)

        # Python menu
        run_menu = tk.Menu(self.menu, tearoff=0)
        run_menu.add_command(label="Ex√©cuter le code Python", command=self.run_python_code)
        self.menu.add_cascade(label="Python", menu=run_menu)

        # Configuration menu
        config_menu = tk.Menu(self.menu, tearoff=0)
        config_menu.add_command(label="Taille de police", command=self.choose_font_size)
        config_menu.add_command(label="Couleur du texte", command=self.choose_font_color)
        self.menu.add_cascade(label="Configuration", menu=config_menu)

        # Internal state
        self.image_path = ""

    def select_image(self):
        path = filedialog.askopenfilename(filetypes=[("Images PNG", "*.png")])
        if path:
            self.image_path = path
            self.img_label.config(text=os.path.basename(path))

    def choose_font_size(self):
        size = simpledialog.askinteger("Taille de police", "Entrez la taille de police :", initialvalue=self.font_size)
        if size:
            self.font_size = size
            self.text_font.configure(size=self.font_size)

    def choose_font_color(self):
        color = colorchooser.askcolor(title="Choisir la couleur du texte")[1]
        if color:
            self.font_color = color
            self.text.configure(fg=self.font_color)

    def save_tipi(self):
        path = filedialog.asksaveasfilename(defaultextension=".tipi",
                                            filetypes=[("Fichier TiPi", "*.tipi")])
        if not path:
            return
        try:
            with open(path, "w", encoding="utf-8") as file:
                file.write("[TEXTE]\n")
                file.write(self.text.get(1.0, tk.END))
                file.write("[IMAGE]\n")
                file.write(self.image_path + "\n")
                file.write("[CONFIG]\n")
                file.write(f"font_size={self.font_size}\n")
                file.write(f"font_color={self.font_color}\n")
            messagebox.showinfo("Enregistr√©", "Ton fichier .tipi est pr√™t avec config üî•")
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de sauvegarder : {e}")

    def open_tipi(self):
        path = filedialog.askopenfilename(filetypes=[("Fichier TiPi", "*.tipi")])
        if not path:
            return
        try:
            with open(path, "r", encoding="utf-8") as file:
                content = file.read()

            # Parse text
            parts = content.split("[TEXTE]\n")[1].split("[IMAGE]\n")
            text_part = parts[0]
            remainder = parts[1]

            # Parse image and config
            img_parts = remainder.split("[CONFIG]\n")
            image_part = img_parts[0].strip()
            config_part = img_parts[1] if len(img_parts) > 1 else ""

            # Update text and image
            self.text.delete(1.0, tk.END)
            self.text.insert(tk.END, text_part)
            self.image_path = image_part
            self.img_label.config(text=os.path.basename(image_part))

            # Parse and apply config
            for line in config_part.splitlines():
                if line.startswith("font_size="):
                    try:
                        self.font_size = int(line.split('=', 1)[1])
                        self.text_font.configure(size=self.font_size)
                    except ValueError:
                        pass
                elif line.startswith("font_color="):
                    self.font_color = line.split('=', 1)[1]
                    self.text.configure(fg=self.font_color)

        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible d‚Äôouvrir le fichier .tipi : {e}")

    def run_python_code(self):
        code = self.text.get(1.0, tk.END)
        # Save as .py file
        self.save_as_py()
        # Execute the code
        self.console.config(state='normal')
        self.console.delete(1.0, tk.END)
        try:
            output = io.StringIO()
            with contextlib.redirect_stdout(output), contextlib.redirect_stderr(output):
                exec(code, {})
            result = output.getvalue()
        except Exception as e:
            result = f"Erreur : {e}"
        self.console.insert(tk.END, result)
        self.console.config(state='disabled')

    def save_as_py(self):
        path = filedialog.asksaveasfilename(defaultextension=".py",
                                            filetypes=[("Fichier Python", "*.py")])
        if path:
            try:
                with open(path, "w", encoding="utf-8") as file:
                    file.write(self.text.get(1.0, tk.END))
                messagebox.showinfo("Sauvegard√©", f"Le code a √©t√© enregistr√© en {os.path.basename(path)}")
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible de sauvegarder le fichier Python : {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = TipiEditor(root)
    root.mainloop()
